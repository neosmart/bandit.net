#region Bandit, Copyright ©2004 Joannes Vermorel

// Bandit project
//
// Project url: http://bandit.sourceforge.net
// Copyright (c) 2004,	Joannes Vermorel, http://www.vermorel.com
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published 
// by the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public 
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#endregion

using System;

namespace Bandit
{
	/// <summary>Base class for all the multi-armed bandit strategy.</summary>
	/// <remarks>
	/// <p>All multi-armed bandit strategies must derive from <c>Gambler</c>.
	/// In particular, the methods <see cref="Play"/> and <see cref="Observe"/>
	/// must be implemented.</p>
	/// </remarks>
	[Serializable]
	public abstract class Gambler
	{
		private int leverCount = -1;

		private double score = 0d;

		/// <summary>Empty constructor.</summary>
		protected Gambler() {}

		/// <summary>Resets the <see cref="Gambler"/>.</summary>
		/// <remarks>When overriden, the base method MUST be called.</remarks>
		public virtual void Reset()
		{
			score = 0d;
		}

		/// <param name="horizon">Number of turns to be played
		/// after the current one.</param>
		public abstract int Play(int horizon);

		/// <param name="index">Variable index.</param>
		/// <param name="value">Value generated by the variable.</param>
		/// <remarks>When overriden, the base method MUST be called.</remarks>
		public virtual void Observe(int index, double value)
		{
			score += value;
		}

		/// <summary>Sum of the observed values.</summary>
		public double Score
		{
			get { return score; }
		}

		/// <summary>
		/// Gets the number of levers (of arms) of the multi-armed bandit.
		/// </summary>
		public int LeverCount
		{
			get { return leverCount; }
			set { leverCount = value; }
		}
	}
}
